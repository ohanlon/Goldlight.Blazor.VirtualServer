@page "/settings/organization"
@using System.ComponentModel
@using Goldlight.Blazor.VirtualServer.Pages.Settings.Validator

@inject OrganizationProps Organization
@inject OrganizationApi OrganizationApi
@implements IDisposable
@inject IJSRuntime JSRuntime

<NavigationLock ConfirmExternalNavigation="true" 
                OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
<PageTitle>Organization Settings</PageTitle>
@attribute [Authorize]

<DataContainer HasData="@(organization is not null)">
  <NoData>
    <MudText>No organization details present</MudText>
    <MudButton Href="/organizations/addorganization" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="mt-2">Add Organization</MudButton>
  </NoData>
  <DataTemplate>
    <MudText Typo="Typo.subtitle1">Organization details</MudText>
    <MudText Typo="Typo.subtitle2">
      <emphasis>Organization name:</emphasis> @organization!.Name
    </MudText>
    <MudText Typo="Typo.subtitle2">Friendly name: @organization!.FriendlyName</MudText>
    <MudText Typo="Typo.subtitle2">API Key: @organization!.ApiKey</MudText>
    <DataContainer HasData="Organization.UserHasEditCapabilities">
      <DataTemplate>
        <MudForm Model="members" @ref="form" Validation="@(validator.ValidateValue)" ValidationDelay="0">
          <MudExpansionPanels Dense Class="mt-0" Elevation="0">
            <MudExpansionPanel Dense Class="mt-0 pl=0" Text="Members" @bind-IsExpanded="membersExpanded">
              <MudButton OnClick="@(AddMember)" Variant="Variant.Filled" Color="Color.Success">Add Member</MudButton>
              <MudDataGrid Dense EditMode="DataGridEditMode.Cell" ReadOnly="false" T="OrganizationMember" Items="members">
                <Columns>
                  <TemplateColumn Title="Email Address">
                    <EditTemplate>
                      <MudTextField @bind-Value="context.Item.EmailAddress" Disabled="context.Item.EmailAddressIsLocked" For="() => context.Item.EmailAddress"></MudTextField>
                    </EditTemplate>
                  </TemplateColumn>
                  <TemplateColumn>
                    <EditTemplate>
                      <MudRadioGroup T="string" @bind-SelectedOption="context.Item.Role" Disabled="UserIsPrimaryOwner(context.Item.Role)">
                        <MudRadio Option="@("PRIMARY OWNER")" Color="Color.Primary" Disabled Dense>Primary Owner</MudRadio>
                        <MudRadio Option="@("OWNER")" Color="Color.Secondary" Dense>Owner</MudRadio>
                        <MudRadio Option="@("EDITOR")" Color="Color.Tertiary" Dense>Editor</MudRadio>
                        <MudRadio Option="@("SUBSCRIBER")" Color="Color.Default" Dense>Subscriber</MudRadio>
                      </MudRadioGroup>
                    </EditTemplate>
                  </TemplateColumn>
                  <TemplateColumn CellClass="d-flex justify-end">
                    <EditTemplate>
                      <MudTooltip Text="Remove this user">
                        <MudIconButton Disabled="submitted" Icon="@Icons.Material.Filled.Delete" Color="Color.Default" OnClick="@(() => RemoveUser(context.Item))"/>
                      </MudTooltip>
                    </EditTemplate>
                  </TemplateColumn>
                </Columns>
              </MudDataGrid>
              <MudButton Disabled="submitted" OnClick="async () => await OnSubmitAsync()" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2">Save</MudButton>
            </MudExpansionPanel>
          </MudExpansionPanels>
        </MudForm>
      </DataTemplate>
    </DataContainer>
  </DataTemplate>

</DataContainer>

@code {
  private Organization? organization;
  private bool membersExpanded = true;
  private MudForm form = null!;
  private ObservableCollection<OrganizationMember>? members;
  private bool submitted;
  private readonly OrganizationMemberValidator validator = new();

  private bool UserIsPrimaryOwner(string role) => role == "PRIMARY OWNER";

  protected override async Task OnInitializedAsync()
  {
    Organization.PropertyChanged += OrganizationOnPropertyChanged;
    await GetOrganizationMembersForSelectedOrganization();
  }

  private void AddMember()
  {
    members?.Add(new OrganizationMember { EditEmailAddress = true, Role = "SUBSCRIBER" });
  }

  private void OrganizationOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
  {
    Task.Run(async () =>
    {
      await GetOrganizationMembersForSelectedOrganization();
      StateHasChanged();
    });
  }

  private async Task GetOrganizationMembersForSelectedOrganization()
  {
    organization = Organization.SelectedOrganization;
    if (organization is null) return;
    members = await OrganizationApi.GetOrganizationMembers(organization!);
    foreach (var organizationMember in members!)
    {
      organizationMember.EmailAddressIsLocked = true;
    }
  }

  public void Dispose()
  {
    Organization.PropertyChanged -= OrganizationOnPropertyChanged;
  }

  private async Task OnSubmitAsync()
  {
    submitted = true;
    await form.Validate();
    if (form.IsValid)
    {
      if (members is not null)
      {
        foreach (OrganizationMember organizationMember in members)
        {
          if (organizationMember.EditEmailAddress)
          {
            await OrganizationApi.AddMemberToOrganizationAsync(organization!.Id, organizationMember);
          }
          if (organizationMember.DeleteEmailAddress)
          {
            await OrganizationApi.RemoveUserFromOrganization(organization!.Id, organizationMember.EmailAddress);
          }
        }
      }
    }
    submitted = false;
  }

  private async Task OnBeforeInternalNavigation(LocationChangingContext context)
  {
    if (!HasUnsavedChanges()) return;

    var isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
      "There are unsaved changes. Are you sure you want to navigate away from this page?");

    if (!isConfirmed)
    {
      context.PreventNavigation();
    }
  }

  private bool HasUnsavedChanges() => 
    members!.Any(organizationMember => organizationMember.DeleteEmailAddress || organizationMember.EditEmailAddress);

  private void RemoveUser(OrganizationMember organizationMember)
  {
    organizationMember.DeleteEmailAddress = true;
    members!.Remove(organizationMember);
  }

}
