@page "/"
@using Goldlight.Blazor.VirtualServer.Extensions
@using System.Collections.ObjectModel

@inject ProjectApi ProjectApi
@inject ProjectState ProjectState
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Projects</PageTitle>

<DataContainer HasData="@(projects is not null)">
  <DataTemplate>
    <MudDataGrid T="Project" Items="projects" Hover="true" QuickFilter="QuickFilterFunc" Style="align-items: center;">
      <ToolBarContent>
        <MudText Typo="Typo.h6">Projects</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>

      </ToolBarContent>
      <Columns>
        <HierarchyColumn T="Project" />
        <PropertyColumn Property="x => x.Name" Title="Name"/>
        <PropertyColumn Property="x => x.FriendlyName" Title="Friendly name"/>
        <TemplateColumn Title="Base URL">
          <CellTemplate>
            <UrlFriendlyProject Project="context.Item" />
          </CellTemplate>
        </TemplateColumn>
        <TemplateColumn CellClass="d-flex justify-end">
          <CellTemplate>
            <MudTooltip Text="Delete this project">
              <MudIconButton Disabled="submitting" Icon="@Icons.Material.Filled.Delete" Color="Color.Default" OnClick="@(() => Delete(context.Item))"/>
            </MudTooltip>
          </CellTemplate>
        </TemplateColumn>
      </Columns>
      <ChildRowContent>
        <DataContainer HasData="context.Item.RequestResponses is not null && context.Item.RequestResponses.Any()">
          <DataTemplate>
            @foreach (RequestResponsePair rrpair in context.Item.RequestResponses!)
            {
              <MudCard Class="px-2 py-2 pl-2 pr-2">
                <MudCardHeader>
                  <CardHeaderAvatar>
                    <MudChip Color="@GetColor(rrpair.Request.Summary.Method)">@rrpair.Request.Summary.Method</MudChip>
                  </CardHeaderAvatar>
                  <CardHeaderContent>
                    <MudBadge Content="@rrpair.Response.Summary.Status" Color="Color.Primary" Overlap="false" Origin="Origin.TopLeft" Class="ml-2 ml-3">
                      <MudText Typo="Typo.subtitle1">@rrpair.Name</MudText>
                    </MudBadge>
                    <MudText Typo="Typo.subtitle2" Class="ml-2 pr-2">@rrpair.Request.Summary.Path</MudText>
                  </CardHeaderContent>
                  <CardHeaderActions>
                    <MudTooltip Text="Clone this request/response">
                      <MudIconButton Disabled="submitting" Icon="@Icons.Material.Filled.CopyAll" Color="Color.Default" OnClick="@(() => Clone(context.Item, rrpair))"/>
                    </MudTooltip>
                    <MudTooltip Text="Delete this request/response">
                      <MudIconButton Disabled="submitting" Icon="@Icons.Material.Filled.Delete" Color="Color.Default" OnClick="@(() => Delete(context.Item, rrpair))"/>
                    </MudTooltip>
                    <MudTooltip Text="Edit this request/response">
                      <MudIconButton Disabled="submitting" Icon="@Icons.Material.Filled.Edit" Color="Color.Default" OnClick="@(() => NavigateToUpload(context.Item, true, rrpair))"/>
                    </MudTooltip>
                  </CardHeaderActions>
                </MudCardHeader>
                <MudText Typo="Typo.body2">@rrpair.Description</MudText>
              </MudCard>
            }
          </DataTemplate>
        </DataContainer>
        <MudButton Disabled="submitting" OnClick="@(() => NavigateToUpload(context.Item, false))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="mt-2">Add RRPair</MudButton>
      </ChildRowContent>
    </MudDataGrid>
  </DataTemplate>
</DataContainer>
<MudButton Disabled="submitting" Href="/projects/addproject" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="mt-2">Add project</MudButton>


@code {

  private string? searchString;
  private Func<Project, bool> QuickFilterFunc => row => string.IsNullOrWhiteSpace(searchString) || row.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) || row.FriendlyName.Contains(searchString, StringComparison.OrdinalIgnoreCase);
  private ObservableCollection<Project>? projects;
  private bool submitting;

  static Color GetColor(string methodName) => 
    methodName switch
    {
      "GET" => Color.Success,
      "POST" => Color.Primary,
      "PUT" => Color.Info,
      "PATCH" => Color.Dark,
      "DELETE" => Color.Error,
      "OPTIONS" => Color.Warning,
      _ => Color.Dark
    };

  protected override async Task OnInitializedAsync()
  {
    ProjectState.SelectedProject = null;
    projects = await ProjectApi.GetProjects("goldlight");
  }

  private void NavigateToUpload(Project project, bool edit, RequestResponsePair? requestResponsePair = null)
  {
    ProjectState.SelectedProject = project;
    ProjectState.SelectedRequestResponse = requestResponsePair;
    NavigationManager.NavigateTo($"/rrpair/upload?Edit={edit}");
  }

  private async Task Clone(Project project, RequestResponsePair rrpair)
  {
    submitting = true;
    var rrpairClone = rrpair.Clone();
    project.RequestResponses!.Add(rrpairClone);
    var updatedProject = await ProjectApi.UpdateProject(project);
    project.Version = updatedProject!.Version;
    NavigateToUpload(project, true, rrpairClone);
  }

  private async Task Delete(Project project)
  {
    submitting = true;
    bool? result = await DialogService.ShowMessageBox("Warning",
      "Deleting a project cannot be undone. Any endpoints will no longer be available.", yesText: "Delete", cancelText: "Cancel");
    if (result.HasValue && result.Value)
    {
      projects.Remove(project);
      await ProjectApi.DeleteProject(project.Id.ToString());
    }
    submitting = false;
  }

  private async Task Delete(Project project, RequestResponsePair rrpair)
  {
    submitting = true;
    bool? result = await DialogService.ShowMessageBox("Warning",
      "Deleting cannot be undone. The endpoint will no longer be available", yesText: "Delete", cancelText: "Cancel");
    if (result.HasValue && result.Value)
    {
      project.RequestResponses!.Remove(rrpair);
      var updatedProject = await ProjectApi.UpdateProject(project);
      project.Version = updatedProject!.Version;
    }
    submitting = false;
  }
}
