@page "/rrpair/upload"

@inject ProjectState ProjectState
@inject NavigationManager NavigationManager

<PageTitle>Response/Response</PageTitle>

<MudGrid>
  <MudItem xs="6">
    <MudCard Class="d-flex align-center justify-center mud-width-full" Elevation="0">
      <MudFileUpload T="IBrowserFile" FilesChanged="UploadRequest" Accept=".json, .request">
        <ButtonTemplate>
          <MudButton HtmlTag="label"
                     Variant="Variant.Filled"
                     Color="Color.Primary"
                     StartIcon="@Icons.Material.Filled.CloudUpload"
                     for="@context">
            Upload Request
          </MudButton>
        </ButtonTemplate>
      </MudFileUpload>
    </MudCard>
    <DataContainer HasData="@(request is not null)">
      <DataTemplate>
        <RequestEditor Request="@request" />
      </DataTemplate>
    </DataContainer>
  </MudItem>
  <MudItem xs="6">
    <MudCard Class="d-flex align-center justify-center mud-width-full" Elevation="0">
      <MudFileUpload T="IBrowserFile" FilesChanged="UploadResponse" Accept=".json, .response">
        <ButtonTemplate>
          <MudButton HtmlTag="label"
                     Variant="Variant.Filled"
                     Color="Color.Primary"
                     StartIcon="@Icons.Material.Filled.CloudUpload"
                     for="@context">
            Upload Response
          </MudButton>
        </ButtonTemplate>
      </MudFileUpload>
    </MudCard>
    <DataContainer HasData="@(response is not null)">
      <DataTemplate>
        <ResponseEditor Response="@response" />
      </DataTemplate>
    </DataContainer>
  </MudItem>
</MudGrid>

@code {
  readonly RequestResponsePair requestResponse = new();
  private readonly RequestHandler requestHandler = new();
  private readonly ResponseHandler responseHandler = new();
  Request? request;
  Response? response;
  Project? project;

  private async Task UploadRequest(IBrowserFile file)
  {
    project = ProjectState.SelectedProject;
    request = requestHandler.Parse(await ReadFileAsync(file));
    requestResponse.Request = request;
  }

  private async Task UploadResponse(IBrowserFile file)
  {
    response = responseHandler.Parse(await ReadFileAsync(file));
    requestResponse.Response = response;
  }

  protected override Task OnInitializedAsync()
  {
    if (ProjectState.SelectedProject is null)
    {
      NavigationManager.NavigateTo("/");
    }
    project = ProjectState.SelectedProject!;
    project.RequestResponses.Add(requestResponse);
    return Task.CompletedTask;
  }

  private static async Task<string> ReadFileAsync(IBrowserFile file)
  {
    await using var stream = file.OpenReadStream();
    using StreamReader reader = new StreamReader(stream);
    string fileContents = await reader.ReadToEndAsync();
    return fileContents;
  }
}
