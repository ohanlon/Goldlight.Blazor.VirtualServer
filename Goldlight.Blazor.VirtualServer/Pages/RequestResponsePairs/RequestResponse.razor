@page "/rrpair/upload"

@using Goldlight.Blazor.VirtualServer.Pages.RequestResponsePairs.Validator

@inject ProjectProps ProjectProps
@inject NavigationManager NavigationManager
@inject ProjectApi ProjectApi

<PageTitle>Response/Response</PageTitle>

<MudForm @ref="form" Model="requestResponsePair" Validation="@(validator.ValidateValue)" ValidationDelay="0">
  <MudGrid>
    <MudItem xs="12">
      <MudTextField Label="Name" Immediate @bind-Value="requestResponsePair.Name" For="@(() => requestResponsePair.Name)"/>
      <MudTextField Label="Description" Immediate Lines="3" @bind-Value="requestResponsePair.Description" For="@(() => requestResponsePair.Description)"/>
    </MudItem>
    <MudItem xs="6">
      <DataContainer HasData="!Edit">
        <DataTemplate>
          <UploadRequestResponse FileTypes=".request" OnRequestUploaded="OnRequestUploadedAsync" Upload="UploadRequestResponse.UploadType.Request"/>
        </DataTemplate>
      </DataContainer>
      <MudSelect Dense Immediate @bind-Value="requestResponsePair.Request.Summary.Method" For="() => requestResponsePair.Request.Summary.Method">
        @foreach (string method in httpMethods)
        {
          <MudSelectItem T="string" Value="@method">@method</MudSelectItem>
        }
      </MudSelect>
      <MudTextField Label="Protocol" @bind-Value="requestResponsePair.Request.Summary.Protocol" For="@(() => requestResponsePair.Request.Summary.Protocol)"/>
      <MudTextField Label="Path" @bind-Value="requestResponsePair.Request.Summary.Path" For="@(() => requestResponsePair.Request.Summary.Path)"/>
      <MudExpansionPanels Dense Class="mt-0" Elevation="0">
        <MudExpansionPanel Dense Class="mt-0 pl=0" Text="Headers" @bind-IsExpanded="requestHeaderExpanded">
          <MudButton OnClick="@(() => AddHeader(requestResponsePair.Request.Headers))" Variant="Variant.Filled" Color="Color.Success">Add Header</MudButton>
          <MudDataGrid Dense EditMode="DataGridEditMode.Cell" ReadOnly="false" T="HttpHeader" Items="requestResponsePair.Request.Headers" Style="align-items: center;">
            <Columns>
              <PropertyColumn Property="hdr => hdr.Name"/>
              <PropertyColumn Property="hdr => hdr.Value"/>
              <TemplateColumn CellClass="d-flex justify-end">
                <EditTemplate>
                  <MudTooltip Text="Delete this header">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteHeader(requestResponsePair.Request.Headers, context.Item))"/>
                  </MudTooltip>
                </EditTemplate>
              </TemplateColumn>
            </Columns>
          </MudDataGrid>
        </MudExpansionPanel>
      </MudExpansionPanels>
      <MudTextField Label="Content" Immediate @bind-Value="requestResponsePair.Request.Content" For="@(() => requestResponsePair.Request.Content)" Lines="20"/>
    </MudItem>
    <MudItem xs="6">
      <DataContainer HasData="!Edit">
        <DataTemplate>
          <UploadRequestResponse FileTypes=".response" ButtonText="Upload Response" OnResponseUploaded="OnResponseUploadedAsync" Upload="UploadRequestResponse.UploadType.Response"/>
        </DataTemplate>
      </DataContainer>
      <MudTextField Label="Protocol" Immediate @bind-Value="requestResponsePair.Response.Summary.Protocol" For="@(() => requestResponsePair.Response.Summary.Protocol)"/>
      <MudNumericField Label="Status" Immediate @bind-Value="requestResponsePair.Response.Summary.Status" For="@(() => requestResponsePair.Response.Summary.Status)"/>
      <MudExpansionPanels Dense Class="mt-0" Elevation="0">
        <MudExpansionPanel Dense Class="mt-0 pl=0" DisableGutters Text="Headers" @bind-IsExpanded="responseHeaderExpanded">
          <MudButton OnClick="@(() => AddHeader(requestResponsePair.Response.Headers))" Variant="Variant.Filled" Color="Color.Success">Add Header</MudButton>
          <MudDataGrid Dense EditMode="DataGridEditMode.Cell" ReadOnly="false" T="HttpHeader" Items="requestResponsePair.Response.Headers" Style="align-items: center;">
            <Columns>
              <PropertyColumn Property="hdr => hdr.Name"/>
              <PropertyColumn Property="hdr => hdr.Value"/>
              <TemplateColumn CellClass="d-flex justify-end">
                <EditTemplate>
                  <MudTooltip Text="Delete this header">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteHeader(requestResponsePair.Response.Headers, context.Item))"/>
                  </MudTooltip>
                </EditTemplate>
              </TemplateColumn>
            </Columns>
          </MudDataGrid>
        </MudExpansionPanel>
      </MudExpansionPanels>
      <MudTextField Label="Content" Immediate @bind-Value="requestResponsePair.Response.Content" For="@(() => requestResponsePair.Response.Content)" Lines="20"/>
    </MudItem>
  </MudGrid>
  <MudButton Disabled="submitted" OnClick="async () => await OnSubmitAsync()" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2">Save</MudButton>
</MudForm>

@code
{
  [Parameter]
  [SupplyParameterFromQuery]
  public bool Edit { get; set; }

  private RequestResponsePair requestResponsePair = new();
  private bool requestHeaderExpanded = true;
  private bool responseHeaderExpanded = true;
  private bool submitted;
  private MudForm form = null!;
  private readonly RequestResponsePairValidator validator = new();

  private readonly string[] httpMethods =
  {
    "POST",
    "GET",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS",
    "ANY"
  };

  protected override void OnInitialized()
  {
    if (ProjectProps.SelectedProject is null)
    {
      NavigationManager.NavigateTo("/");
    }
    ProjectProps.SelectedProject!.RequestResponses ??= new List<RequestResponsePair>();
    if (!Edit)
    {
      requestResponsePair.ProjectId = ProjectProps.SelectedProject!.Id;
      ProjectProps.SelectedProject.RequestResponses.Add(requestResponsePair);
    }
    else
    {
      requestResponsePair = ProjectProps.SelectedRequestResponse!;
    }
  }

  private void DeleteHeader(ObservableCollection<HttpHeader> headers, HttpHeader header)
  {
    headers.Remove(header);
  }

  private void AddHeader(ObservableCollection<HttpHeader> headers)
  {
    headers.Add(new HttpHeader());
  }

  private async Task OnSubmitAsync()
  {
    submitted = true;
    await form.Validate();
    if (form.IsValid)
    {
      await ProjectApi.SaveRequestResponse(ProjectProps.SelectedProject!.Id, requestResponsePair);
      ProjectProps.Clear();
      NavigationManager.NavigateTo("/");
    }
    submitted = false;
  }

  private async Task OnResponseUploadedAsync(Response response)
  {
    requestResponsePair.Response = response;
    StateHasChanged();
    await form.Validate();
  }

  private async Task OnRequestUploadedAsync(Request request)
  {
    requestResponsePair.Request = request;
    StateHasChanged();
    await form.Validate();
  }
}
